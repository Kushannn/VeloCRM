// schema.prisma
// MongoDB + Prisma Schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String
  name      String?
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  // âœ… Relations
  assignedTasks       Task[]             @relation("AssignedTasks")
  createdTasks        Task[]             @relation("CreatedTasks")
  sprints             Sprint[]           @relation("UserSprints")
  notes               Note[]
  leads               Lead[]             @relation("LeadAssignee")
  membership         UserOrganization? 
  ownedOrganizations  Organization[]     @relation("OrganizationOwner")
}


enum Role {
  USER
  ADMIN
}

model Organization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  ownerId   String
  createdAt DateTime @default(now())

  // Relations
  owner       User               @relation("OrganizationOwner", fields: [ownerId], references: [id])
  sprints     Sprint[]
  leads       Lead[]
  memberships UserOrganization[]
  projects    Project[]          // ðŸ‘ˆ Fix added here
}


enum MembershipRole {
  ADMIN
  MEMBER
}

model UserOrganization {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String         @unique 
  organizationId String
  role           MembershipRole @default(MEMBER)

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
}


model Project {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  organizationId String
  createdAt      DateTime       @default(now())

  // Relations
  organization   Organization   @relation(fields: [organizationId], references: [id])
  sprints        Sprint[]
  tasks          Task[]
  notes          Note[]
}

model Sprint {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  startDate      DateTime
  endDate        DateTime
  createdById    String
  organizationId String
  projectId      String
  createdAt      DateTime @default(now())

  // Relations
  createdBy    User         @relation("UserSprints", fields: [createdById], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  project      Project?     @relation(fields: [projectId], references: [id])
  tasks        Task[]
  notes        Note[]
}

model Task {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  status       TaskStatus   @default(PENDING)
  priority     TaskPriority @default(MEDIUM)
  assignedToId String?
  createdById  String
  sprintId     String
  projectId    String?
  createdAt    DateTime     @default(now())

  // âœ… Explicit Relations
  assignedTo   User?    @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdBy    User     @relation("CreatedTasks", fields: [createdById], references: [id])
  sprint       Sprint   @relation(fields: [sprintId], references: [id])
  project      Project? @relation(fields: [projectId], references: [id])
}


enum TaskPriority {
  LOW 
  MEDIUM 
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String
  sprintId  String
  projectId String
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  sprint Sprint @relation(fields: [sprintId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
}

model Lead {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?
  phone          String?
  status         LeadStatus @default(NEW)
  source         String?
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  assignedToId   String?
  organizationId String

  // Relations
  assignedTo   User?        @relation("LeadAssignee", fields: [assignedToId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  CONVERTED
}
